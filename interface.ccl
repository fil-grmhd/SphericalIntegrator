# Interface definition for thorn SphericalIntegrator

USES INCLUDE: vect.hh
USES INCLUDE: carpetinterp2.hh

implements: SphericalIntegrator
inherits: grid

INCLUDE HEADER: slices.hh in spherical_slices.hh
INCLUDE HEADER: IO/io_hdf5.h in io_hdf5.h

PUBLIC:


# Register a Cactus variable for surface/volume integration and return registration number.
# Parameters are name of the grid function (varname), 
# name of the scalar where the result should be stored (outname),
# sphereid of the sphere over which will be integrated (sn),
# how often should be integrated (integrate_every),
# how often should be interpolated (interpolate_every),
# and the distribution method of the sphere data (distrib_method)

# Remarks:
# A value of 0 for the _every parameters means NEVER.
# If the goal is to integrate a simple GF on the sphere,
# both _every parameters should be equal. Remeber that all refinement lvls
# have to be evolved to the same timestep, to get a reasonable result.

# Integration is done automatically by the IntegrateCollectively routine.

CCTK_INT FUNCTION \
    SphericalIntegrator_RegisterSurfaceIntegral(CCTK_POINTER_TO_CONST IN varname, \
                                                CCTK_POINTER_TO_CONST IN outname, \
                                                CCTK_INT IN sn, \
                                                CCTK_INT IN integrate_every, \
                                                CCTK_INT IN interpolate_every, \
                                                CCTK_POINTER_TO_CONST IN distrib_method)
PROVIDES FUNCTION SphericalIntegrator_RegisterSurfaceIntegral \
    WITH SphericalIntegrator_RegisterSurfaceIntegral \
    LANGUAGE C

CCTK_INT FUNCTION \
    SphericalIntegrator_RegisterVolumeIntegral(CCTK_POINTER_TO_CONST IN varname, \
                                               CCTK_POINTER_TO_CONST IN outname, \
                                               CCTK_INT IN sn, \
                                               CCTK_INT IN integrate_every)
PROVIDES FUNCTION SphericalIntegrator_RegisterVolumeIntegral \
    WITH SphericalIntegrator_RegisterVolumeIntegral \
    LANGUAGE C



##########################################################################
## Following functions are only needed for manual integration/sync etc. ##
##########################################################################

# Return Surface-Integral over registered variable. 
CCTK_REAL FUNCTION \
    SphericalIntegrator_IntegrateSurfaceVariable(CCTK_INT IN varno)
PROVIDES FUNCTION SphericalIntegrator_IntegrateSurfaceVariable \
    WITH SphericalIntegrator_SurfaceIntegrate \
    LANGUAGE C

# Return Volume-Integral over registered variable. 
CCTK_REAL FUNCTION \
    SphericalIntegrator_IntegrateVolumeVariable(CCTK_INT IN varno)
PROVIDES FUNCTION SphericalIntegrator_IntegrateVolumeVariable \
    WITH SphericalIntegrator_VolumeIntegrate \
    LANGUAGE C


# Synchronzie slice, i.e. interpolate ONE var onto sphere
CCTK_INT FUNCTION \
    SphericalIntegrator_SyncSurfaceVariable(CCTK_POINTER_TO_CONST IN cctkGH_, \
	                                          CCTK_INT IN varno)
PROVIDES FUNCTION SphericalIntegrator_SyncSurfaceVariable \
    WITH SphericalIntegrator_SurfaceSync \
    LANGUAGE C


# Synchronzie surface slices, i.e. interpolate a whole set of variables on the same slice
CCTK_INT FUNCTION \
    SphericalIntegrator_CollectiveSyncSurfaceVariables(CCTK_POINTER_TO_CONST IN cctkGH_, \
	                                                     CCTK_POINTER_TO_CONST IN varno, \
	                                                     CCTK_INT IN number_of_vars)
PROVIDES FUNCTION SphericalIntegrator_CollectiveSyncSurfaceVariables \
    WITH SphericalIntegrator_CollectiveSurfaceSync \
    LANGUAGE C

### Ylm decompositions maybe broken, needs testing

# Return value of scalar product with spin-weighted spherical harmonics sYlm 
CCTK_COMPLEX FUNCTION \
    SphericalIntegrator_ContractVariableWithsYlm \
         (CCTK_INT IN varno, \
	  CCTK_INT IN timelevel, \
	  CCTK_INT IN s, \
	  CCTK_INT IN l, \
	  CCTK_INT IN m)
PROVIDES FUNCTION SphericalIntegrator_ContractVariableWithsYlm \
    WITH SphericalIntegrator_ContractWithsYlm \
    LANGUAGE C


# Return an array of all values of scalar product with all spin-weighted spherical harmonics sYlm up to lmax 
CCTK_INT FUNCTION \
    SphericalIntegrator_ContractVariableWithAllsYlm \
         (CCTK_INT IN varno, \
	  CCTK_INT IN timelevel, \
	  CCTK_INT IN s, \
	  CCTK_INT IN lmin, \
	  CCTK_INT IN lmax, \
	  CCTK_COMPLEX OUT ARRAY coeffs)
PROVIDES FUNCTION SphericalIntegrator_ContractVariableWithAllsYlm \
    WITH SphericalIntegrator_ContractWithAllsYlm \
    LANGUAGE C


# To be defined by the setting thorn.
# Suggested meanings:
# zero: The surface data are invalid (garbage)
# one:  The surface data are valid in principle, although they may be outdated
CCTK_INT ss_active[nslices] TYPE=scalar

# To be defined by the setting thorn.
# Suggested meanings:
# zero:     No surface is provided at this time step
# negative: No surface could be found at this time step
# positive: The surface data are valid
CCTK_INT ss_valid[nslices] TYPE=scalar

# A variable storing the slice ID of the associated
# radius function
CCTK_INT ss_radius_id[nslices] TYPE=scalar


CCTK_REAL ss_info[nslices] TYPE=scalar
{
  # The following are covariant quantities:

  # proper area:
  #    A := int(S) sqrt(q) dS
  #    with q_ij the 2-metric on the surface
  ss_area



  # The following are coordinate-dependent quantities:

  # monopole moment (average coordinate radius):
  #    M := int(S) h ds / A
  ss_mean_radius

  # dipole moment:
  #    D^i := int(S) x^i dS / A
  ss_centroid_x ss_centroid_y ss_centroid_z

  # quadrupole moment:
  #    Q^ij := int(S) y^i y^j dS / A   with y^i := x^i - D^i
  ss_quadrupole_xx ss_quadrupole_xy ss_quadrupole_xz
  ss_quadrupole_yy ss_quadrupole_yz ss_quadrupole_zz



  # minimum and maximum coordinate radius
  ss_min_radius ss_max_radius

  # bounding box
  ss_min_x ss_min_y ss_min_z ss_max_x ss_max_y ss_max_z
  
  ss_origin_x ss_origin_y ss_origin_z
  
} "Surface information"



CCTK_INT ss_shape_descriptors[nslices] TYPE=scalar
{
  ss_ntheta, ss_nphi, ss_npatches
} "The shape of the surfaces, ie. number of points per patch and number of patches"

PROTECTED:

CCTK_REAL ss_vol_integration_gfs[max_volume_integrals] type=GF timelevels=1 tags='checkpoint="no" prolongation="none" InterpNumTimelevels=1'
{
  ss_tmp_volume_gfs
} "Temporary integration GFs, set to zero outside sphere (r > ss_radius)"

